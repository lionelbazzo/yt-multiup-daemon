// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: photo.sql

package db

import (
	"context"
	"database/sql"
)

const createPhoto = `-- name: CreatePhoto :exec
INSERT INTO photos (hash, path, date_time, iso, exposure_time, x_dimension, y_dimension, model, focal_length)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING hash, path, date_time, iso, exposure_time, x_dimension, y_dimension, model, focal_length
`

type CreatePhotoParams struct {
	Hash         string         `db:"hash"`
	Path         string         `db:"path"`
	DateTime     sql.NullString `db:"date_time"`
	Iso          sql.NullInt32  `db:"iso"`
	ExposureTime sql.NullString `db:"exposure_time"`
	XDimension   sql.NullInt32  `db:"x_dimension"`
	YDimension   sql.NullInt32  `db:"y_dimension"`
	Model        sql.NullString `db:"model"`
	FocalLength  sql.NullString `db:"focal_length"`
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) error {
	_, err := q.db.ExecContext(ctx, createPhoto,
		arg.Hash,
		arg.Path,
		arg.DateTime,
		arg.Iso,
		arg.ExposureTime,
		arg.XDimension,
		arg.YDimension,
		arg.Model,
		arg.FocalLength,
	)
	return err
}

const getPhoto = `-- name: GetPhoto :one
SELECT hash, path, date_time, iso, exposure_time, x_dimension, y_dimension, model, focal_length
FROM photos
WHERE hash = $1
`

func (q *Queries) GetPhoto(ctx context.Context, hash string) (Photo, error) {
	row := q.db.QueryRowContext(ctx, getPhoto, hash)
	var i Photo
	err := row.Scan(
		&i.Hash,
		&i.Path,
		&i.DateTime,
		&i.Iso,
		&i.ExposureTime,
		&i.XDimension,
		&i.YDimension,
		&i.Model,
		&i.FocalLength,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: photo.sql

package sqlc

import (
	"context"
	"database/sql"
)

const countPhotoByHash = `-- name: CountPhotoByHash :one
SELECT COUNT(*)
FROM photos
WHERE hash = ?
`

func (q *Queries) CountPhotoByHash(ctx context.Context, db DBTX, hash string) (int64, error) {
	row := db.QueryRowContext(ctx, countPhotoByHash, hash)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPhotos = `-- name: CountPhotos :one
SELECT COUNT(*)
FROM photos
`

func (q *Queries) CountPhotos(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countPhotos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrReplacePhoto = `-- name: CreateOrReplacePhoto :exec
REPLACE INTO photos (hash, path, date_time, iso, exposure_time, x_dimension, y_dimension, model, f_number, orientation)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateOrReplacePhotoParams struct {
	Hash         string         `db:"hash"`
	Path         string         `db:"path"`
	DateTime     sql.NullString `db:"date_time"`
	Iso          sql.NullInt64  `db:"iso"`
	ExposureTime sql.NullString `db:"exposure_time"`
	XDimension   sql.NullInt64  `db:"x_dimension"`
	YDimension   sql.NullInt64  `db:"y_dimension"`
	Model        sql.NullString `db:"model"`
	FNumber      sql.NullString `db:"f_number"`
	Orientation  sql.NullInt64  `db:"orientation"`
}

func (q *Queries) CreateOrReplacePhoto(ctx context.Context, db DBTX, arg CreateOrReplacePhotoParams) error {
	_, err := db.ExecContext(ctx, createOrReplacePhoto,
		arg.Hash,
		arg.Path,
		arg.DateTime,
		arg.Iso,
		arg.ExposureTime,
		arg.XDimension,
		arg.YDimension,
		arg.Model,
		arg.FNumber,
		arg.Orientation,
	)
	return err
}

const createOrReplaceThumbnail = `-- name: CreateOrReplaceThumbnail :exec
REPLACE INTO thumbnails (hash, height, width, thumbnail)
VALUES (?, ?, ?, ?)
`

type CreateOrReplaceThumbnailParams struct {
	Hash      string `db:"hash"`
	Height    int64  `db:"height"`
	Width     int64  `db:"width"`
	Thumbnail []byte `db:"thumbnail"`
}

func (q *Queries) CreateOrReplaceThumbnail(ctx context.Context, db DBTX, arg CreateOrReplaceThumbnailParams) error {
	_, err := db.ExecContext(ctx, createOrReplaceThumbnail,
		arg.Hash,
		arg.Height,
		arg.Width,
		arg.Thumbnail,
	)
	return err
}

const deleteAllPhotoInPath = `-- name: DeleteAllPhotoInPath :exec
DELETE
FROM photos
WHERE path LIKE ?
`

func (q *Queries) DeleteAllPhotoInPath(ctx context.Context, db DBTX, path string) error {
	_, err := db.ExecContext(ctx, deleteAllPhotoInPath, path)
	return err
}

const deleteAllPhotos = `-- name: DeleteAllPhotos :exec
DELETE
FROM photos
WHERE 1
`

func (q *Queries) DeleteAllPhotos(ctx context.Context, db DBTX) error {
	_, err := db.ExecContext(ctx, deleteAllPhotos)
	return err
}

const deletePhotoByPath = `-- name: DeletePhotoByPath :exec
DELETE
FROM photos
WHERE path = ?
`

func (q *Queries) DeletePhotoByPath(ctx context.Context, db DBTX, path string) error {
	_, err := db.ExecContext(ctx, deletePhotoByPath, path)
	return err
}

const getPhoto = `-- name: GetPhoto :one
SELECT hash,
       path,
       date_time,
       iso,
       exposure_time,
       x_dimension,
       y_dimension,
       model,
       f_number,
       orientation
FROM photos
WHERE hash = ?
`

func (q *Queries) GetPhoto(ctx context.Context, db DBTX, hash string) (Photo, error) {
	row := db.QueryRowContext(ctx, getPhoto, hash)
	var i Photo
	err := row.Scan(
		&i.Hash,
		&i.Path,
		&i.DateTime,
		&i.Iso,
		&i.ExposureTime,
		&i.XDimension,
		&i.YDimension,
		&i.Model,
		&i.FNumber,
		&i.Orientation,
	)
	return i, err
}

const getThumbnail = `-- name: GetThumbnail :one
SELECT thumbnail
FROM thumbnails
WHERE hash = ?
  AND width = ?
  AND height = ?
`

type GetThumbnailParams struct {
	Hash   string `db:"hash"`
	Width  int64  `db:"width"`
	Height int64  `db:"height"`
}

func (q *Queries) GetThumbnail(ctx context.Context, db DBTX, arg GetThumbnailParams) ([]byte, error) {
	row := db.QueryRowContext(ctx, getThumbnail, arg.Hash, arg.Width, arg.Height)
	var thumbnail []byte
	err := row.Scan(&thumbnail)
	return thumbnail, err
}

const list = `-- name: List :many
SELECT hash,
       path,
       date_time,
       iso,
       exposure_time,
       x_dimension,
       y_dimension,
       model,
       f_number,
       orientation
FROM photos
ORDER BY date_time DESC
LIMIT ? OFFSET ?
`

type ListParams struct {
	Limit  int64 `db:"limit"`
	Offset int64 `db:"offset"`
}

func (q *Queries) List(ctx context.Context, db DBTX, arg ListParams) ([]Photo, error) {
	rows, err := db.QueryContext(ctx, list, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Photo{}
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.Hash,
			&i.Path,
			&i.DateTime,
			&i.Iso,
			&i.ExposureTime,
			&i.XDimension,
			&i.YDimension,
			&i.Model,
			&i.FNumber,
			&i.Orientation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

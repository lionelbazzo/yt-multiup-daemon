// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: photo.sql

package sqlc

import (
	"context"
	"database/sql"
)

const countPhotoByHash = `-- name: CountPhotoByHash :one
SELECT COUNT(*)
FROM photos
WHERE hash = ?
`

func (q *Queries) CountPhotoByHash(ctx context.Context, db DBTX, hash string) (int64, error) {
	row := db.QueryRowContext(ctx, countPhotoByHash, hash)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPhoto = `-- name: CreatePhoto :exec
INSERT INTO photos (hash, path, date_time, iso, exposure_time, x_dimension, y_dimension, model, f_number)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreatePhotoParams struct {
	Hash         string         `db:"hash"`
	Path         string         `db:"path"`
	DateTime     sql.NullString `db:"date_time"`
	Iso          sql.NullInt32  `db:"iso"`
	ExposureTime sql.NullString `db:"exposure_time"`
	XDimension   sql.NullInt32  `db:"x_dimension"`
	YDimension   sql.NullInt32  `db:"y_dimension"`
	Model        sql.NullString `db:"model"`
	FNumber      sql.NullString `db:"f_number"`
}

func (q *Queries) CreatePhoto(ctx context.Context, db DBTX, arg CreatePhotoParams) error {
	_, err := db.ExecContext(ctx, createPhoto,
		arg.Hash,
		arg.Path,
		arg.DateTime,
		arg.Iso,
		arg.ExposureTime,
		arg.XDimension,
		arg.YDimension,
		arg.Model,
		arg.FNumber,
	)
	return err
}

const getPhoto = `-- name: GetPhoto :one
SELECT hash, path, date_time, iso, exposure_time, x_dimension, y_dimension, model, f_number
FROM photos
WHERE hash = ?
`

func (q *Queries) GetPhoto(ctx context.Context, db DBTX, hash string) (Photo, error) {
	row := db.QueryRowContext(ctx, getPhoto, hash)
	var i Photo
	err := row.Scan(
		&i.Hash,
		&i.Path,
		&i.DateTime,
		&i.Iso,
		&i.ExposureTime,
		&i.XDimension,
		&i.YDimension,
		&i.Model,
		&i.FNumber,
	)
	return i, err
}

const list = `-- name: List :many
SELECT hash, path, date_time, iso, exposure_time, x_dimension, y_dimension, model, f_number
FROM photos
`

func (q *Queries) List(ctx context.Context, db DBTX) ([]Photo, error) {
	rows, err := db.QueryContext(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Photo{}
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.Hash,
			&i.Path,
			&i.DateTime,
			&i.Iso,
			&i.ExposureTime,
			&i.XDimension,
			&i.YDimension,
			&i.Model,
			&i.FNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

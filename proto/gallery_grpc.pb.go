// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/gallery.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GalleryClient is the client API for Gallery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GalleryClient interface {
	// get all photos
	GetPhotos(ctx context.Context, in *ListFilter, opts ...grpc.CallOption) (*PhotosResponse, error)
	GetByHash(ctx context.Context, in *HashFilter, opts ...grpc.CallOption) (*Photo, error)
	ContentByHash(ctx context.Context, in *HashFilter, opts ...grpc.CallOption) (Gallery_ContentByHashClient, error)
}

type galleryClient struct {
	cc grpc.ClientConnInterface
}

func NewGalleryClient(cc grpc.ClientConnInterface) GalleryClient {
	return &galleryClient{cc}
}

func (c *galleryClient) GetPhotos(ctx context.Context, in *ListFilter, opts ...grpc.CallOption) (*PhotosResponse, error) {
	out := new(PhotosResponse)
	err := c.cc.Invoke(ctx, "/photo.Gallery/GetPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryClient) GetByHash(ctx context.Context, in *HashFilter, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, "/photo.Gallery/GetByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryClient) ContentByHash(ctx context.Context, in *HashFilter, opts ...grpc.CallOption) (Gallery_ContentByHashClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gallery_ServiceDesc.Streams[0], "/photo.Gallery/ContentByHash", opts...)
	if err != nil {
		return nil, err
	}
	x := &galleryContentByHashClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gallery_ContentByHashClient interface {
	Recv() (*PhotoChunk, error)
	grpc.ClientStream
}

type galleryContentByHashClient struct {
	grpc.ClientStream
}

func (x *galleryContentByHashClient) Recv() (*PhotoChunk, error) {
	m := new(PhotoChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GalleryServer is the server API for Gallery service.
// All implementations must embed UnimplementedGalleryServer
// for forward compatibility
type GalleryServer interface {
	// get all photos
	GetPhotos(context.Context, *ListFilter) (*PhotosResponse, error)
	GetByHash(context.Context, *HashFilter) (*Photo, error)
	ContentByHash(*HashFilter, Gallery_ContentByHashServer) error
	mustEmbedUnimplementedGalleryServer()
}

// UnimplementedGalleryServer must be embedded to have forward compatible implementations.
type UnimplementedGalleryServer struct {
}

func (UnimplementedGalleryServer) GetPhotos(context.Context, *ListFilter) (*PhotosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotos not implemented")
}
func (UnimplementedGalleryServer) GetByHash(context.Context, *HashFilter) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByHash not implemented")
}
func (UnimplementedGalleryServer) ContentByHash(*HashFilter, Gallery_ContentByHashServer) error {
	return status.Errorf(codes.Unimplemented, "method ContentByHash not implemented")
}
func (UnimplementedGalleryServer) mustEmbedUnimplementedGalleryServer() {}

// UnsafeGalleryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GalleryServer will
// result in compilation errors.
type UnsafeGalleryServer interface {
	mustEmbedUnimplementedGalleryServer()
}

func RegisterGalleryServer(s grpc.ServiceRegistrar, srv GalleryServer) {
	s.RegisterService(&Gallery_ServiceDesc, srv)
}

func _Gallery_GetPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalleryServer).GetPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.Gallery/GetPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalleryServer).GetPhotos(ctx, req.(*ListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gallery_GetByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalleryServer).GetByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.Gallery/GetByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalleryServer).GetByHash(ctx, req.(*HashFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gallery_ContentByHash_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HashFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GalleryServer).ContentByHash(m, &galleryContentByHashServer{stream})
}

type Gallery_ContentByHashServer interface {
	Send(*PhotoChunk) error
	grpc.ServerStream
}

type galleryContentByHashServer struct {
	grpc.ServerStream
}

func (x *galleryContentByHashServer) Send(m *PhotoChunk) error {
	return x.ServerStream.SendMsg(m)
}

// Gallery_ServiceDesc is the grpc.ServiceDesc for Gallery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gallery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photo.Gallery",
	HandlerType: (*GalleryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhotos",
			Handler:    _Gallery_GetPhotos_Handler,
		},
		{
			MethodName: "GetByHash",
			Handler:    _Gallery_GetByHash_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ContentByHash",
			Handler:       _Gallery_ContentByHash_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/gallery.proto",
}
